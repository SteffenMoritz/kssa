tabla_valclas_mase
◘
kssa_skj_del = kssa(skj_del_20_ts,start_method = "all",
methods = "all",
segments = 10,
iterations = 10,
percentmd = 0.2,
seed = 1234)
kssa_plot(kssa_skj_del,type = "complete",metric = "rmse")
#genero datos faltantes al azar (MCAR = missing completely at random)
set.seed(12345)
skj_del_20 =  delete_MCAR(skj_del, 0.2)
# convierto a serie de tiempo
skj_del_20_ts = ts(skj_del_20,start=c(1959,1),end=c(2019,12),frequency = 12)
skj_del_ts =  ts(skj_del,start=c(1959,1),end=c(2019,12),frequency = 12)
#siempre comprobar
statsNA(skj_del_20_ts)
plot.ts(skj_del_20_ts)
# Metodos para validación clásica -----------------------------------------
skj_del_20_arima = na_kalman(skj_del_20_ts,model="auto.arima",smooth = TRUE,nit = -1)
#kalman
skj_del_20_kalman = na_seadec(skj_del_20_ts, algorithm = "kalman")
#structs
skj_del_20_struct = na_kalman(skj_del_20_ts,model="StructTS",smooth = TRUE,nit = -1)
#moving average simple
skj_del_20_mas = na_ma(skj_del_20_ts,k=4,weighting = "simple")
#moving average linear
skj_del_20_mal = na_ma(skj_del_20_ts,k=4,weighting = "linear")
#moving average exponential
skj_del_20_mae = na_ma(skj_del_20_ts,k=4,weighting = "exponential")
#locf (last observation carried forward)
skj_del_20_locf = na_locf(skj_del_20_ts, option = "locf")
#decomp
skj_del_20_decomp = na.interp(skj_del_20_ts)
#linear
skj_del_20_linear = na_interpolation(skj_del_20_ts,option = "linear")
#stine
skj_del_20_stine = na_interpolation(skj_del_20_ts,option = "stine")
#spline
skj_del_20_spline = na_interpolation(skj_del_20_ts,option = "spline")
# Calcular tablas para rmse y mase ----------------------------------------
#calcular los errores rmse para cada imputacion
rmse_valclas=c(rmse(skj_del_ts,skj_del_20_arima),rmse(skj_del_ts,skj_del_20_kalman),
rmse(skj_del_ts,skj_del_20_locf),rmse(skj_del_ts,skj_del_20_decomp),
rmse(skj_del_ts,skj_del_20_linear),rmse(skj_del_ts,skj_del_20_stine),
rmse(skj_del_ts,skj_del_20_spline),rmse(skj_del_ts,skj_del_20_mae),
rmse(skj_del_ts,skj_del_20_mal),rmse(skj_del_ts,skj_del_20_mas),
rmse(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con rmse y nombres
tabla_valclas_rmse = data.frame(method,rmse_valclas)
#ordenar tabla de menor a mayor rmse
tabla_valclas_rmse = tabla_valclas_rmse[order(tabla_valclas_rmse$rmse_valclas),]
tabla_valclas_rmse
#calcular los errores mase para cada imputacion
mase_valclas=c(mase(skj_del_ts,skj_del_20_arima),mase(skj_del_ts,skj_del_20_kalman),
mase(skj_del_ts,skj_del_20_locf),mase(skj_del_ts,skj_del_20_decomp),
mase(skj_del_ts,skj_del_20_linear),mase(skj_del_ts,skj_del_20_stine),
mase(skj_del_ts,skj_del_20_spline),mase(skj_del_ts,skj_del_20_mae),
mase(skj_del_ts,skj_del_20_mal),mase(skj_del_ts,skj_del_20_mas),
mase(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con mase y nombres
tabla_valclas_mase = data.frame(method,mase_valclas)
#ordenar tabla de menor a mayor mase
tabla_valclas_mase = tabla_valclas_mase[order(tabla_valclas_mase$mase_valclas),]
tabla_valclas_mase
#muestre las dos tablas
tabla_valclas_rmse
tabla_valclas_mase
◘
# KSSA -------
kssa_skj_del = kssa(skj_del_20_ts,start_method = "all",
methods = "all",
segments = 10,
iterations = 10,
percentmd = 0.2,
seed = 1234)
kssa_plot(kssa_skj_del,type = "complete",metric = "rmse")
kssa_skj_del = kssa(skj_del_20_ts,start_method = "all",
methods = "all",
segments = 10,
iterations = 20,
percentmd = 0.2,
seed = 1234)
kssa_plot(kssa_skj_del,type = "complete",metric = "rmse")
kssa_skj_del = kssa(skj_del_20_ts,start_method = "all",
methods = "all",
segments = 10,
iterations = 20,
percentmd = 0.2,
seed = 12345)
kssa_plot(kssa_skj_del,type = "complete",metric = "rmse")
kssa_plot(kssa_skj_del,type = "complete",metric = "mase")
#genero datos faltantes al azar (MCAR = missing completely at random)
set.seed(123545)
skj_del_20 =  delete_MCAR(skj_del, 0.2)
# convierto a serie de tiempo
skj_del_20_ts = ts(skj_del_20,start=c(1959,1),end=c(2019,12),frequency = 12)
skj_del_ts =  ts(skj_del,start=c(1959,1),end=c(2019,12),frequency = 12)
#siempre comprobar
statsNA(skj_del_20_ts)
plot.ts(skj_del_20_ts)
# Metodos para validación clásica -----------------------------------------
skj_del_20_arima = na_kalman(skj_del_20_ts,model="auto.arima",smooth = TRUE,nit = -1)
#kalman
skj_del_20_kalman = na_seadec(skj_del_20_ts, algorithm = "kalman")
#structs
skj_del_20_struct = na_kalman(skj_del_20_ts,model="StructTS",smooth = TRUE,nit = -1)
#moving average simple
skj_del_20_mas = na_ma(skj_del_20_ts,k=4,weighting = "simple")
#moving average linear
skj_del_20_mal = na_ma(skj_del_20_ts,k=4,weighting = "linear")
#moving average exponential
skj_del_20_mae = na_ma(skj_del_20_ts,k=4,weighting = "exponential")
#locf (last observation carried forward)
skj_del_20_locf = na_locf(skj_del_20_ts, option = "locf")
#decomp
skj_del_20_decomp = na.interp(skj_del_20_ts)
#linear
skj_del_20_linear = na_interpolation(skj_del_20_ts,option = "linear")
#stine
skj_del_20_stine = na_interpolation(skj_del_20_ts,option = "stine")
#spline
skj_del_20_spline = na_interpolation(skj_del_20_ts,option = "spline")
# Calcular tablas para rmse y mase ----------------------------------------
#calcular los errores rmse para cada imputacion
rmse_valclas=c(rmse(skj_del_ts,skj_del_20_arima),rmse(skj_del_ts,skj_del_20_kalman),
rmse(skj_del_ts,skj_del_20_locf),rmse(skj_del_ts,skj_del_20_decomp),
rmse(skj_del_ts,skj_del_20_linear),rmse(skj_del_ts,skj_del_20_stine),
rmse(skj_del_ts,skj_del_20_spline),rmse(skj_del_ts,skj_del_20_mae),
rmse(skj_del_ts,skj_del_20_mal),rmse(skj_del_ts,skj_del_20_mas),
rmse(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con rmse y nombres
tabla_valclas_rmse = data.frame(method,rmse_valclas)
#ordenar tabla de menor a mayor rmse
tabla_valclas_rmse = tabla_valclas_rmse[order(tabla_valclas_rmse$rmse_valclas),]
tabla_valclas_rmse
#calcular los errores mase para cada imputacion
mase_valclas=c(mase(skj_del_ts,skj_del_20_arima),mase(skj_del_ts,skj_del_20_kalman),
mase(skj_del_ts,skj_del_20_locf),mase(skj_del_ts,skj_del_20_decomp),
mase(skj_del_ts,skj_del_20_linear),mase(skj_del_ts,skj_del_20_stine),
mase(skj_del_ts,skj_del_20_spline),mase(skj_del_ts,skj_del_20_mae),
mase(skj_del_ts,skj_del_20_mal),mase(skj_del_ts,skj_del_20_mas),
mase(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con mase y nombres
tabla_valclas_mase = data.frame(method,mase_valclas)
#ordenar tabla de menor a mayor mase
tabla_valclas_mase = tabla_valclas_mase[order(tabla_valclas_mase$mase_valclas),]
tabla_valclas_mase
#muestre las dos tablas
tabla_valclas_rmse
tabla_valclas_mase
◘
#genero datos faltantes al azar (MCAR = missing completely at random)
set.seed(123545)
skj_del_20 =  delete_MCAR(skj_del, 0.2)
# convierto a serie de tiempo
skj_del_20_ts = ts(skj_del_20,start=c(1959,1),end=c(2019,12),frequency = 12)
skj_del_ts =  ts(skj_del,start=c(1959,1),end=c(2019,12),frequency = 12)
#siempre comprobar
statsNA(skj_del_20_ts)
plot.ts(skj_del_20_ts)
# Metodos para validación clásica -----------------------------------------
skj_del_20_arima = na_kalman(skj_del_20_ts,model="auto.arima",smooth = TRUE,nit = -1)
#kalman
skj_del_20_kalman = na_seadec(skj_del_20_ts, algorithm = "kalman")
#structs
skj_del_20_struct = na_kalman(skj_del_20_ts,model="StructTS",smooth = TRUE,nit = -1)
#moving average simple
skj_del_20_mas = na_ma(skj_del_20_ts,k=4,weighting = "simple")
#moving average linear
skj_del_20_mal = na_ma(skj_del_20_ts,k=4,weighting = "linear")
#moving average exponential
skj_del_20_mae = na_ma(skj_del_20_ts,k=4,weighting = "exponential")
#locf (last observation carried forward)
skj_del_20_locf = na_locf(skj_del_20_ts, option = "locf")
#decomp
skj_del_20_decomp = na.interp(skj_del_20_ts)
#linear
skj_del_20_linear = na_interpolation(skj_del_20_ts,option = "linear")
#stine
skj_del_20_stine = na_interpolation(skj_del_20_ts,option = "stine")
#spline
skj_del_20_spline = na_interpolation(skj_del_20_ts,option = "spline")
# Calcular tablas para rmse y mase ----------------------------------------
#calcular los errores rmse para cada imputacion
rmse_valclas=c(rmse(skj_del_ts,skj_del_20_arima),rmse(skj_del_ts,skj_del_20_kalman),
rmse(skj_del_ts,skj_del_20_locf),rmse(skj_del_ts,skj_del_20_decomp),
rmse(skj_del_ts,skj_del_20_linear),rmse(skj_del_ts,skj_del_20_stine),
rmse(skj_del_ts,skj_del_20_spline),rmse(skj_del_ts,skj_del_20_mae),
rmse(skj_del_ts,skj_del_20_mal),rmse(skj_del_ts,skj_del_20_mas),
rmse(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con rmse y nombres
tabla_valclas_rmse = data.frame(method,rmse_valclas)
#ordenar tabla de menor a mayor rmse
tabla_valclas_rmse = tabla_valclas_rmse[order(tabla_valclas_rmse$rmse_valclas),]
tabla_valclas_rmse
#calcular los errores mase para cada imputacion
mase_valclas=c(mase(skj_del_ts,skj_del_20_arima),mase(skj_del_ts,skj_del_20_kalman),
mase(skj_del_ts,skj_del_20_locf),mase(skj_del_ts,skj_del_20_decomp),
mase(skj_del_ts,skj_del_20_linear),mase(skj_del_ts,skj_del_20_stine),
mase(skj_del_ts,skj_del_20_spline),mase(skj_del_ts,skj_del_20_mae),
mase(skj_del_ts,skj_del_20_mal),mase(skj_del_ts,skj_del_20_mas),
mase(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con mase y nombres
tabla_valclas_mase = data.frame(method,mase_valclas)
#ordenar tabla de menor a mayor mase
tabla_valclas_mase = tabla_valclas_mase[order(tabla_valclas_mase$mase_valclas),]
tabla_valclas_mase
#muestre las dos tablas
tabla_valclas_rmse
tabla_valclas_mase
◘
#genero datos faltantes al azar (MCAR = missing completely at random)
set.seed(1232545)
skj_del_20 =  delete_MCAR(skj_del, 0.2)
# convierto a serie de tiempo
skj_del_20_ts = ts(skj_del_20,start=c(1959,1),end=c(2019,12),frequency = 12)
skj_del_ts =  ts(skj_del,start=c(1959,1),end=c(2019,12),frequency = 12)
#siempre comprobar
statsNA(skj_del_20_ts)
plot.ts(skj_del_20_ts)
# Metodos para validación clásica -----------------------------------------
skj_del_20_arima = na_kalman(skj_del_20_ts,model="auto.arima",smooth = TRUE,nit = -1)
#kalman
skj_del_20_kalman = na_seadec(skj_del_20_ts, algorithm = "kalman")
#structs
skj_del_20_struct = na_kalman(skj_del_20_ts,model="StructTS",smooth = TRUE,nit = -1)
#moving average simple
skj_del_20_mas = na_ma(skj_del_20_ts,k=4,weighting = "simple")
#moving average linear
skj_del_20_mal = na_ma(skj_del_20_ts,k=4,weighting = "linear")
#moving average exponential
skj_del_20_mae = na_ma(skj_del_20_ts,k=4,weighting = "exponential")
#locf (last observation carried forward)
skj_del_20_locf = na_locf(skj_del_20_ts, option = "locf")
#decomp
skj_del_20_decomp = na.interp(skj_del_20_ts)
#linear
skj_del_20_linear = na_interpolation(skj_del_20_ts,option = "linear")
#stine
skj_del_20_stine = na_interpolation(skj_del_20_ts,option = "stine")
#spline
skj_del_20_spline = na_interpolation(skj_del_20_ts,option = "spline")
# Calcular tablas para rmse y mase ----------------------------------------
#calcular los errores rmse para cada imputacion
rmse_valclas=c(rmse(skj_del_ts,skj_del_20_arima),rmse(skj_del_ts,skj_del_20_kalman),
rmse(skj_del_ts,skj_del_20_locf),rmse(skj_del_ts,skj_del_20_decomp),
rmse(skj_del_ts,skj_del_20_linear),rmse(skj_del_ts,skj_del_20_stine),
rmse(skj_del_ts,skj_del_20_spline),rmse(skj_del_ts,skj_del_20_mae),
rmse(skj_del_ts,skj_del_20_mal),rmse(skj_del_ts,skj_del_20_mas),
rmse(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con rmse y nombres
tabla_valclas_rmse = data.frame(method,rmse_valclas)
#ordenar tabla de menor a mayor rmse
tabla_valclas_rmse = tabla_valclas_rmse[order(tabla_valclas_rmse$rmse_valclas),]
tabla_valclas_rmse
#calcular los errores mase para cada imputacion
mase_valclas=c(mase(skj_del_ts,skj_del_20_arima),mase(skj_del_ts,skj_del_20_kalman),
mase(skj_del_ts,skj_del_20_locf),mase(skj_del_ts,skj_del_20_decomp),
mase(skj_del_ts,skj_del_20_linear),mase(skj_del_ts,skj_del_20_stine),
mase(skj_del_ts,skj_del_20_spline),mase(skj_del_ts,skj_del_20_mae),
mase(skj_del_ts,skj_del_20_mal),mase(skj_del_ts,skj_del_20_mas),
mase(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con mase y nombres
tabla_valclas_mase = data.frame(method,mase_valclas)
#ordenar tabla de menor a mayor mase
tabla_valclas_mase = tabla_valclas_mase[order(tabla_valclas_mase$mase_valclas),]
tabla_valclas_mase
#muestre las dos tablas
tabla_valclas_rmse
tabla_valclas_mase
◘
# KSSA ------
kssa_skj_del = kssa(skj_del_20_ts,start_method = "all",
methods = "all",
segments = 3,
iterations = 20,
percentmd = 0.2,
seed = 1234)
kssa_plot(kssa_skj_del,type = "complete",metric = "rmse")
kssa_plot(kssa_skj_del,type = "complete",metric = "rmse")
#primero generar los datos faltantes en el objeto vector y luego si convertir a serie de tiempo
#genero datos faltantes al azar (MCAR = missing completely at random)
set.seed(1984)
skj_del_20 =  delete_MCAR(skj_del, 0.2)
# convierto a serie de tiempo
skj_del_20_ts = ts(skj_del_20,start=c(1959,1),end=c(2019,12),frequency = 12)
skj_del_ts =  ts(skj_del,start=c(1959,1),end=c(2019,12),frequency = 12)
#siempre comprobar
statsNA(skj_del_20_ts)
plot.ts(skj_del_20_ts)
# Metodos para validación clásica -----------------------------------------
skj_del_20_arima = na_kalman(skj_del_20_ts,model="auto.arima",smooth = TRUE,nit = -1)
#kalman
skj_del_20_kalman = na_seadec(skj_del_20_ts, algorithm = "kalman")
#structs
skj_del_20_struct = na_kalman(skj_del_20_ts,model="StructTS",smooth = TRUE,nit = -1)
#moving average simple
skj_del_20_mas = na_ma(skj_del_20_ts,k=4,weighting = "simple")
#moving average linear
skj_del_20_mal = na_ma(skj_del_20_ts,k=4,weighting = "linear")
#moving average exponential
skj_del_20_mae = na_ma(skj_del_20_ts,k=4,weighting = "exponential")
#locf (last observation carried forward)
skj_del_20_locf = na_locf(skj_del_20_ts, option = "locf")
#decomp
skj_del_20_decomp = na.interp(skj_del_20_ts)
#linear
skj_del_20_linear = na_interpolation(skj_del_20_ts,option = "linear")
#stine
skj_del_20_stine = na_interpolation(skj_del_20_ts,option = "stine")
#spline
skj_del_20_spline = na_interpolation(skj_del_20_ts,option = "spline")
# Calcular tablas para rmse y mase ----------------------------------------
#calcular los errores rmse para cada imputacion
rmse_valclas=c(rmse(skj_del_ts,skj_del_20_arima),rmse(skj_del_ts,skj_del_20_kalman),
rmse(skj_del_ts,skj_del_20_locf),rmse(skj_del_ts,skj_del_20_decomp),
rmse(skj_del_ts,skj_del_20_linear),rmse(skj_del_ts,skj_del_20_stine),
rmse(skj_del_ts,skj_del_20_spline),rmse(skj_del_ts,skj_del_20_mae),
rmse(skj_del_ts,skj_del_20_mal),rmse(skj_del_ts,skj_del_20_mas),
rmse(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con rmse y nombres
tabla_valclas_rmse = data.frame(method,rmse_valclas)
#ordenar tabla de menor a mayor rmse
tabla_valclas_rmse = tabla_valclas_rmse[order(tabla_valclas_rmse$rmse_valclas),]
tabla_valclas_rmse
#calcular los errores mase para cada imputacion
mase_valclas=c(mase(skj_del_ts,skj_del_20_arima),mase(skj_del_ts,skj_del_20_kalman),
mase(skj_del_ts,skj_del_20_locf),mase(skj_del_ts,skj_del_20_decomp),
mase(skj_del_ts,skj_del_20_linear),mase(skj_del_ts,skj_del_20_stine),
mase(skj_del_ts,skj_del_20_spline),mase(skj_del_ts,skj_del_20_mae),
mase(skj_del_ts,skj_del_20_mal),mase(skj_del_ts,skj_del_20_mas),
mase(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con mase y nombres
tabla_valclas_mase = data.frame(method,mase_valclas)
#ordenar tabla de menor a mayor mase
tabla_valclas_mase = tabla_valclas_mase[order(tabla_valclas_mase$mase_valclas),]
tabla_valclas_mase
#muestre las dos tablas
tabla_valclas_rmse
tabla_valclas_mase
◘
# KSSA ----
#primero generar los datos faltantes en el objeto vector y luego si convertir a serie de tiempo
#genero datos faltantes al azar (MCAR = missing completely at random)
set.seed(1984)
skj_del_20 =  delete_MCAR(skj_del, 0.2)
# convierto a serie de tiempo
skj_del_20_ts = ts(skj_del_20,start=c(1959,1),end=c(2019,12),frequency = 12)
skj_del_ts =  ts(skj_del,start=c(1959,1),end=c(2019,12),frequency = 12)
#siempre comprobar
statsNA(skj_del_20_ts)
plot.ts(skj_del_20_ts)
# Metodos para validación clásica -----------------------------------------
skj_del_20_arima = na_kalman(skj_del_20_ts,model="auto.arima",smooth = TRUE,nit = -1)
#kalman
skj_del_20_kalman = na_seadec(skj_del_20_ts, algorithm = "kalman")
#structs
skj_del_20_struct = na_kalman(skj_del_20_ts,model="StructTS",smooth = TRUE,nit = -1)
#moving average simple
skj_del_20_mas = na_ma(skj_del_20_ts,k=4,weighting = "simple")
#moving average linear
skj_del_20_mal = na_ma(skj_del_20_ts,k=4,weighting = "linear")
#moving average exponential
skj_del_20_mae = na_ma(skj_del_20_ts,k=4,weighting = "exponential")
#locf (last observation carried forward)
skj_del_20_locf = na_locf(skj_del_20_ts, option = "locf")
#decomp
skj_del_20_decomp = na.interp(skj_del_20_ts)
#linear
skj_del_20_linear = na_interpolation(skj_del_20_ts,option = "linear")
#stine
skj_del_20_stine = na_interpolation(skj_del_20_ts,option = "stine")
#spline
skj_del_20_spline = na_interpolation(skj_del_20_ts,option = "spline")
# Calcular tablas para rmse y mase ----------------------------------------
#calcular los errores rmse para cada imputacion
rmse_valclas=c(rmse(skj_del_ts,skj_del_20_arima),rmse(skj_del_ts,skj_del_20_kalman),
rmse(skj_del_ts,skj_del_20_locf),rmse(skj_del_ts,skj_del_20_decomp),
rmse(skj_del_ts,skj_del_20_linear),rmse(skj_del_ts,skj_del_20_stine),
rmse(skj_del_ts,skj_del_20_spline),rmse(skj_del_ts,skj_del_20_mae),
rmse(skj_del_ts,skj_del_20_mal),rmse(skj_del_ts,skj_del_20_mas),
rmse(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con rmse y nombres
tabla_valclas_rmse = data.frame(method,rmse_valclas)
#ordenar tabla de menor a mayor rmse
tabla_valclas_rmse = tabla_valclas_rmse[order(tabla_valclas_rmse$rmse_valclas),]
tabla_valclas_rmse
#calcular los errores mase para cada imputacion
mase_valclas=c(mase(skj_del_ts,skj_del_20_arima),mase(skj_del_ts,skj_del_20_kalman),
mase(skj_del_ts,skj_del_20_locf),mase(skj_del_ts,skj_del_20_decomp),
mase(skj_del_ts,skj_del_20_linear),mase(skj_del_ts,skj_del_20_stine),
mase(skj_del_ts,skj_del_20_spline),mase(skj_del_ts,skj_del_20_mae),
mase(skj_del_ts,skj_del_20_mal),mase(skj_del_ts,skj_del_20_mas),
mase(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con mase y nombres
tabla_valclas_mase = data.frame(method,mase_valclas)
#ordenar tabla de menor a mayor mase
tabla_valclas_mase = tabla_valclas_mase[order(tabla_valclas_mase$mase_valclas),]
tabla_valclas_mase
#muestre las dos tablas
tabla_valclas_rmse
tabla_valclas_mase
◘
# KSSA ----
skj_del_20
#genero datos faltantes al azar (MCAR = missing completely at random)
set.seed(19584)
skj_del_20 =  delete_MCAR(skj_del, 0.2)
skj_del_20
delete_MCAR(skj_del, 0.2)
# convierto a serie de tiempo
skj_del_20_ts = ts(skj_del_20,start=c(1959,1),end=c(2019,12),frequency = 12)
skj_del_ts =  ts(skj_del,start=c(1959,1),end=c(2019,12),frequency = 12)
#siempre comprobar
statsNA(skj_del_20_ts)
plot.ts(skj_del_20_ts)
# Metodos para validación clásica -----------------------------------------
skj_del_20_arima = na_kalman(skj_del_20_ts,model="auto.arima",smooth = TRUE,nit = -1)
#kalman
skj_del_20_kalman = na_seadec(skj_del_20_ts, algorithm = "kalman")
#structs
skj_del_20_struct = na_kalman(skj_del_20_ts,model="StructTS",smooth = TRUE,nit = -1)
#moving average simple
skj_del_20_mas = na_ma(skj_del_20_ts,k=4,weighting = "simple")
#moving average linear
skj_del_20_mal = na_ma(skj_del_20_ts,k=4,weighting = "linear")
#moving average exponential
skj_del_20_mae = na_ma(skj_del_20_ts,k=4,weighting = "exponential")
#locf (last observation carried forward)
skj_del_20_locf = na_locf(skj_del_20_ts, option = "locf")
#decomp
skj_del_20_decomp = na.interp(skj_del_20_ts)
#linear
skj_del_20_linear = na_interpolation(skj_del_20_ts,option = "linear")
#stine
skj_del_20_stine = na_interpolation(skj_del_20_ts,option = "stine")
#spline
skj_del_20_spline = na_interpolation(skj_del_20_ts,option = "spline")
# Calcular tablas para rmse y mase ----------------------------------------
#calcular los errores rmse para cada imputacion
rmse_valclas=c(rmse(skj_del_ts,skj_del_20_arima),rmse(skj_del_ts,skj_del_20_kalman),
rmse(skj_del_ts,skj_del_20_locf),rmse(skj_del_ts,skj_del_20_decomp),
rmse(skj_del_ts,skj_del_20_linear),rmse(skj_del_ts,skj_del_20_stine),
rmse(skj_del_ts,skj_del_20_spline),rmse(skj_del_ts,skj_del_20_mae),
rmse(skj_del_ts,skj_del_20_mal),rmse(skj_del_ts,skj_del_20_mas),
rmse(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con rmse y nombres
tabla_valclas_rmse = data.frame(method,rmse_valclas)
#ordenar tabla de menor a mayor rmse
tabla_valclas_rmse = tabla_valclas_rmse[order(tabla_valclas_rmse$rmse_valclas),]
tabla_valclas_rmse
#calcular los errores mase para cada imputacion
mase_valclas=c(mase(skj_del_ts,skj_del_20_arima),mase(skj_del_ts,skj_del_20_kalman),
mase(skj_del_ts,skj_del_20_locf),mase(skj_del_ts,skj_del_20_decomp),
mase(skj_del_ts,skj_del_20_linear),mase(skj_del_ts,skj_del_20_stine),
mase(skj_del_ts,skj_del_20_spline),mase(skj_del_ts,skj_del_20_mae),
mase(skj_del_ts,skj_del_20_mal),mase(skj_del_ts,skj_del_20_mas),
mase(skj_del_ts,skj_del_20_struct))
method = c("auto.arima","kalman","struct","mas","mal","mae",
"locf","decomp","linear","stine","spline")
#crear tabla con mase y nombres
tabla_valclas_mase = data.frame(method,mase_valclas)
#ordenar tabla de menor a mayor mase
tabla_valclas_mase = tabla_valclas_mase[order(tabla_valclas_mase$mase_valclas),]
tabla_valclas_mase
#muestre las dos tablas
tabla_valclas_rmse
tabla_valclas_mase
◘
kssa_skj_del = kssa(skj_del_20_ts,start_method = "all",
methods = "all",
segments = 5,
iterations = 20,
percentmd = 0.2,
seed = 1234)
kssa_plot(kssa_skj_del,type = "complete",metric = "rmse")
?delete_MNAR_1_to_x
skj_del_20 =  delete_MNAR_1_to_x (skj_del, 0.2)
skj_del_20 =  delete_MNAR_1_to_x (skj_del, 0.2, skj_del)
skj_del_20 =  delete_MNAR_1_to_x (skj_del, 0.2, col = 1)
skj_del_20 =  delete_MNAR_rank (skj_del)
skj_del_20 =  delete_MNAR_rank (skj_del, p= 0.2)
skj_del_20 =  delete_MNAR_rank (skj_del, p= 0.2, cols_mis = skj_del)
str(kssa_skj_del)
kssa
